"use strict";import{app as l}from"//comfyui.nodecomfy.com/scripts/app.js";import{api as s}from"//comfyui.nodecomfy.com/scripts/api.js";const y=["queue-button","comfy-load-button","comfy-save-button","comfy-refresh-button","comfy-clipspace-button","comfy-clear-button","comfy-load-default-button","comfy-reset-view-button"],p=["drag-handle","comfy-menu-actions"];function i(){const t=document.querySelector("div.comfy-menu");t&&Array.from(t.children).forEach(e=>{if(e.classList.contains("comfy-menu-header")){e.classList.add("nodeai"),Array.from(e.children).forEach(n=>{p.some(c=>n.classList.contains(c))||e.removeChild(n)});const o=e.querySelector(".comfy-menu-actions");o&&(o.style["margin-left"]="auto",Array.from(o.children).forEach(n=>{n.classList.contains("comfy-close-menu-btn")||o.removeChild(n)}))}else y.includes(e.id)?e.classList.add("nodeai"):t.removeChild(e)})}function m(t,e){t.canvas.read_only=e,t.ui.menuContainer.style.display=e?"none":"block",t.ui.menuHamburger.style.display=e?"none":"block",Array.from(document.getElementsByTagName("textarea")).forEach(o=>{o.readOnly=e?"true":"false"}),Array.from(document.getElementsByTagName("input")).forEach(o=>{o.readOnly=e?"true":"false"})}window.nodeaiSetReadonly=t=>{m(l,m)},window.nodeaiOnPostSetup=()=>{console.log("[nodeai global]","postSetup")},console.log("[nodeai global]","init"),i();let d=setTimeout(()=>{i()},50);const h=document.querySelector(".comfy-menu");if(h){const t=`
.comfy-menu >*:not(.nodeai) {
  display: none !important;
  width: 0;
  height: 0;
}
  `,e=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");e.appendChild(o),o.styleSheet?o.styleSheet.cssText=t:o.appendChild(document.createTextNode(t))}s.init=(()=>{console.log("api init")}).bind(s);let u="";const g={name:"nodeai",async init(t){console.log("[nodeai]","extension init"),i(),u=new URLSearchParams(window.location.search).get("token")||""},async setup(t){console.log("[nodeai]","extension setup"),i(),t.ui.menuContainer.style.display="block",t.ui.menuHamburger.style.display="none";const e=s.fetchApi;async function o(c,a){if(c==="/prompt"&&a?.method==="POST")if(window.parent){const f={prompt:JSON.parse(a.body).prompt};return window.parent&&window.parent.postMessage({cmd:"flowToCode",data:f},"*"),{status:200,json:()=>Promise.resolve({node_errors:[],prompt_id:"*"})}}else throw"not allowd";a||(a={}),a.headers||(a.headers={}),a.headers["Nodeai-Token"]=u;const r=await e.call(s,c,a);if(r.status===400)throw await r.text();return r}s.fetchApi=o.bind(s);const n=document.getElementById("queue-button");n&&(n.textContent="Run"),clearTimeout(d),d=null},afterConfigureGraph(t,e){i(),setTimeout(()=>{i()},100)}};l.registerExtension(g);
